// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: update_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "update_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quaternion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quaternion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wheel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wheel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Button_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Button_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mouse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mouse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabeledMarker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabeledMarker_reflection_ = NULL;
const ::google::protobuf::Descriptor* RigidBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RigidBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* Motive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Motive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Updates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Updates_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_update_5fprotocol_2eproto() {
  protobuf_AddDesc_update_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "update_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  Position_descriptor_ = file->message_type(0);
  static const int Position_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, z_),
  };
  Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Position));
  Quaternion_descriptor_ = file->message_type(1);
  static const int Quaternion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, w_),
  };
  Quaternion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quaternion_descriptor_,
      Quaternion::default_instance_,
      Quaternion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quaternion));
  Wheel_descriptor_ = file->message_type(2);
  static const int Wheel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wheel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wheel, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wheel, tick_),
  };
  Wheel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Wheel_descriptor_,
      Wheel::default_instance_,
      Wheel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wheel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wheel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Wheel));
  Button_descriptor_ = file->message_type(3);
  static const int Button_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, state_),
  };
  Button_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Button_descriptor_,
      Button::default_instance_,
      Button_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Button, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Button));
  Mouse_descriptor_ = file->message_type(4);
  static const int Mouse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mouse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mouse, connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mouse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mouse, buttons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mouse, wheels_),
  };
  Mouse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mouse_descriptor_,
      Mouse::default_instance_,
      Mouse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mouse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mouse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mouse));
  DataDescription_descriptor_ = file->message_type(5);
  static const int DataDescription_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDescription, dd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDescription, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDescription, parentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDescription, parentoffsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDescription, parentoffsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDescription, parentoffsetz_),
  };
  DataDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataDescription_descriptor_,
      DataDescription::default_instance_,
      DataDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataDescription));
  LabeledMarker_descriptor_ = file->message_type(6);
  static const int LabeledMarker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledMarker, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledMarker, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledMarker, position_),
  };
  LabeledMarker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabeledMarker_descriptor_,
      LabeledMarker::default_instance_,
      LabeledMarker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledMarker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledMarker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabeledMarker));
  RigidBody_descriptor_ = file->message_type(7);
  static const int RigidBody_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, trackingvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, meanerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, quaternion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, markers_),
  };
  RigidBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RigidBody_descriptor_,
      RigidBody::default_instance_,
      RigidBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RigidBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RigidBody));
  Motive_descriptor_ = file->message_type(8);
  static const int Motive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motive, duringrecording_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motive, trackedmodelschanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motive, timecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motive, descriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motive, rigid_bodies_),
  };
  Motive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Motive_descriptor_,
      Motive::default_instance_,
      Motive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Motive));
  Update_descriptor_ = file->message_type(9);
  static const int Update_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, mod_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, motive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, mice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, strokes_),
  };
  Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Update_descriptor_,
      Update::default_instance_,
      Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Update));
  Updates_descriptor_ = file->message_type(10);
  static const int Updates_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Updates, mod_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Updates, updates_),
  };
  Updates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Updates_descriptor_,
      Updates::default_instance_,
      Updates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Updates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Updates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Updates));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_update_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quaternion_descriptor_, &Quaternion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Wheel_descriptor_, &Wheel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Button_descriptor_, &Button::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mouse_descriptor_, &Mouse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataDescription_descriptor_, &DataDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabeledMarker_descriptor_, &LabeledMarker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RigidBody_descriptor_, &RigidBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Motive_descriptor_, &Motive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Update_descriptor_, &Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Updates_descriptor_, &Updates::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_update_5fprotocol_2eproto() {
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Quaternion::default_instance_;
  delete Quaternion_reflection_;
  delete Wheel::default_instance_;
  delete Wheel_reflection_;
  delete Button::default_instance_;
  delete Button_reflection_;
  delete Mouse::default_instance_;
  delete Mouse_reflection_;
  delete DataDescription::default_instance_;
  delete DataDescription_reflection_;
  delete LabeledMarker::default_instance_;
  delete LabeledMarker_reflection_;
  delete RigidBody::default_instance_;
  delete RigidBody_reflection_;
  delete Motive::default_instance_;
  delete Motive_reflection_;
  delete Update::default_instance_;
  delete Update_reflection_;
  delete Updates::default_instance_;
  delete Updates_reflection_;
}

void protobuf_AddDesc_update_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025update_protocol.proto\"+\n\010Position\022\t\n\001x"
    "\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"8\n\nQuaterni"
    "on\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\022\t\n\001w"
    "\030\004 \002(\001\"4\n\005Wheel\022\n\n\002id\030\001 \002(\005\022\021\n\tdirection"
    "\030\002 \002(\t\022\014\n\004tick\030\003 \002(\005\"#\n\006Button\022\n\n\002id\030\001 \002"
    "(\005\022\r\n\005state\030\002 \002(\t\"f\n\005Mouse\022\n\n\002id\030\001 \002(\005\022\021"
    "\n\tconnected\030\002 \002(\010\022\014\n\004name\030\003 \002(\t\022\030\n\007butto"
    "ns\030\004 \003(\0132\007.Button\022\026\n\006wheels\030\005 \003(\0132\006.Whee"
    "l\"\226\001\n\017DataDescription\022\014\n\004name\030\001 \002(\t\022\r\n\005d"
    "d_id\030\002 \002(\005\022\017\n\007item_id\030\003 \002(\005\022\020\n\010parentId\030"
    "\004 \002(\021\022\025\n\rparentOffsetX\030\005 \002(\021\022\025\n\rparentOf"
    "fsetY\030\006 \002(\021\022\025\n\rparentOffsetZ\030\007 \002(\021\"F\n\rLa"
    "beledMarker\022\n\n\002id\030\001 \002(\005\022\014\n\004size\030\002 \002(\001\022\033\n"
    "\010position\030\003 \002(\0132\t.Position\"\240\001\n\tRigidBody"
    "\022\n\n\002id\030\001 \002(\005\022\025\n\rtrackingValid\030\002 \002(\010\022\021\n\tm"
    "eanError\030\003 \002(\002\022\033\n\010position\030\004 \002(\0132\t.Posit"
    "ion\022\037\n\nquaternion\030\005 \002(\0132\013.Quaternion\022\037\n\007"
    "markers\030\006 \003(\0132\016.LabeledMarker\"\233\001\n\006Motive"
    "\022\027\n\017duringRecording\030\001 \002(\010\022\034\n\024trackedMode"
    "lsChanged\030\002 \002(\010\022\020\n\010timecode\030\003 \001(\t\022&\n\014des"
    "criptions\030\004 \003(\0132\020.DataDescription\022 \n\014rig"
    "id_bodies\030\005 \003(\0132\n.RigidBody\"\202\001\n\006Update\022\n"
    "\n\002id\030\001 \002(\t\022\023\n\013mod_version\030\002 \002(\005\022\014\n\004time\030"
    "\003 \002(\005\022\027\n\006motive\030\004 \001(\0132\007.Motive\022\024\n\004mice\030\005"
    " \003(\0132\006.Mouse\022\032\n\007strokes\030\006 \003(\0132\t.Position"
    "\"8\n\007Updates\022\023\n\013mod_version\030\001 \002(\005\022\030\n\007upda"
    "tes\030\002 \003(\0132\007.UpdateB)\n\027com.mrl.update_pro"
    "tocolB\016UpdateProtocol", 1101);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "update_protocol.proto", &protobuf_RegisterTypes);
  Position::default_instance_ = new Position();
  Quaternion::default_instance_ = new Quaternion();
  Wheel::default_instance_ = new Wheel();
  Button::default_instance_ = new Button();
  Mouse::default_instance_ = new Mouse();
  DataDescription::default_instance_ = new DataDescription();
  LabeledMarker::default_instance_ = new LabeledMarker();
  RigidBody::default_instance_ = new RigidBody();
  Motive::default_instance_ = new Motive();
  Update::default_instance_ = new Update();
  Updates::default_instance_ = new Updates();
  Position::default_instance_->InitAsDefaultInstance();
  Quaternion::default_instance_->InitAsDefaultInstance();
  Wheel::default_instance_->InitAsDefaultInstance();
  Button::default_instance_->InitAsDefaultInstance();
  Mouse::default_instance_->InitAsDefaultInstance();
  DataDescription::default_instance_->InitAsDefaultInstance();
  LabeledMarker::default_instance_->InitAsDefaultInstance();
  RigidBody::default_instance_->InitAsDefaultInstance();
  Motive::default_instance_->InitAsDefaultInstance();
  Update::default_instance_->InitAsDefaultInstance();
  Updates::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_update_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_update_5fprotocol_2eproto {
  StaticDescriptorInitializer_update_5fprotocol_2eproto() {
    protobuf_AddDesc_update_5fprotocol_2eproto();
  }
} static_descriptor_initializer_update_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kZFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Position)
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Position)
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fprotocol_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Position*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Position)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Position)
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Position)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Position)
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quaternion::kXFieldNumber;
const int Quaternion::kYFieldNumber;
const int Quaternion::kZFieldNumber;
const int Quaternion::kWFieldNumber;
#endif  // !_MSC_VER

Quaternion::Quaternion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Quaternion)
}

void Quaternion::InitAsDefaultInstance() {
}

Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Quaternion)
}

void Quaternion::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quaternion_descriptor_;
}

const Quaternion& Quaternion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fprotocol_2eproto();
  return *default_instance_;
}

Quaternion* Quaternion::default_instance_ = NULL;

Quaternion* Quaternion::New() const {
  return new Quaternion;
}

void Quaternion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Quaternion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, w_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Quaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_w;
        break;
      }

      // required double w = 4;
      case 4: {
        if (tag == 33) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Quaternion)
  return false;
#undef DO_
}

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Quaternion)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // required double w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Quaternion)
}

::google::protobuf::uint8* Quaternion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Quaternion)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // required double w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Quaternion)
  return target;
}

int Quaternion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // required double w = 4;
    if (has_w()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quaternion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quaternion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quaternion_descriptor_;
  metadata.reflection = Quaternion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Wheel::kIdFieldNumber;
const int Wheel::kDirectionFieldNumber;
const int Wheel::kTickFieldNumber;
#endif  // !_MSC_VER

Wheel::Wheel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Wheel)
}

void Wheel::InitAsDefaultInstance() {
}

Wheel::Wheel(const Wheel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Wheel)
}

void Wheel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  direction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wheel::~Wheel() {
  // @@protoc_insertion_point(destructor:Wheel)
  SharedDtor();
}

void Wheel::SharedDtor() {
  if (direction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete direction_;
  }
  if (this != default_instance_) {
  }
}

void Wheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wheel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wheel_descriptor_;
}

const Wheel& Wheel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fprotocol_2eproto();
  return *default_instance_;
}

Wheel* Wheel::default_instance_ = NULL;

Wheel* Wheel::New() const {
  return new Wheel;
}

void Wheel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Wheel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, tick_);
    if (has_direction()) {
      if (direction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        direction_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Wheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Wheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_direction;
        break;
      }

      // required string direction = 2;
      case 2: {
        if (tag == 18) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->direction().data(), this->direction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "direction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required int32 tick = 3;
      case 3: {
        if (tag == 24) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Wheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Wheel)
  return false;
#undef DO_
}

void Wheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Wheel)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "direction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->direction(), output);
  }

  // required int32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Wheel)
}

::google::protobuf::uint8* Wheel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Wheel)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "direction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->direction(), target);
  }

  // required int32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Wheel)
  return target;
}

int Wheel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->direction());
    }

    // required int32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wheel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Wheel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Wheel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wheel::MergeFrom(const Wheel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Wheel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wheel::CopyFrom(const Wheel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wheel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Wheel::Swap(Wheel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(direction_, other->direction_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Wheel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wheel_descriptor_;
  metadata.reflection = Wheel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Button::kIdFieldNumber;
const int Button::kStateFieldNumber;
#endif  // !_MSC_VER

Button::Button()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Button)
}

void Button::InitAsDefaultInstance() {
}

Button::Button(const Button& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Button)
}

void Button::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Button::~Button() {
  // @@protoc_insertion_point(destructor:Button)
  SharedDtor();
}

void Button::SharedDtor() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (this != default_instance_) {
  }
}

void Button::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Button::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Button_descriptor_;
}

const Button& Button::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fprotocol_2eproto();
  return *default_instance_;
}

Button* Button::default_instance_ = NULL;

Button* Button::New() const {
  return new Button;
}

void Button::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Button::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Button)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // required string state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Button)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Button)
  return false;
#undef DO_
}

void Button::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Button)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Button)
}

::google::protobuf::uint8* Button::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Button)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Button)
  return target;
}

int Button::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Button::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Button* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Button*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Button::MergeFrom(const Button& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Button::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Button::CopyFrom(const Button& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Button::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Button::Swap(Button* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Button::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Button_descriptor_;
  metadata.reflection = Button_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mouse::kIdFieldNumber;
const int Mouse::kConnectedFieldNumber;
const int Mouse::kNameFieldNumber;
const int Mouse::kButtonsFieldNumber;
const int Mouse::kWheelsFieldNumber;
#endif  // !_MSC_VER

Mouse::Mouse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mouse)
}

void Mouse::InitAsDefaultInstance() {
}

Mouse::Mouse(const Mouse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mouse)
}

void Mouse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  connected_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mouse::~Mouse() {
  // @@protoc_insertion_point(destructor:Mouse)
  SharedDtor();
}

void Mouse::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Mouse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mouse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mouse_descriptor_;
}

const Mouse& Mouse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fprotocol_2eproto();
  return *default_instance_;
}

Mouse* Mouse::default_instance_ = NULL;

Mouse* Mouse::New() const {
  return new Mouse;
}

void Mouse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Mouse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, connected_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  buttons_.Clear();
  wheels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mouse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mouse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_connected;
        break;
      }

      // required bool connected = 2;
      case 2: {
        if (tag == 16) {
         parse_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
          set_has_connected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buttons;
        break;
      }

      // repeated .Button buttons = 4;
      case 4: {
        if (tag == 34) {
         parse_buttons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buttons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buttons;
        if (input->ExpectTag(42)) goto parse_wheels;
        break;
      }

      // repeated .Wheel wheels = 5;
      case 5: {
        if (tag == 42) {
         parse_wheels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wheels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_wheels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mouse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mouse)
  return false;
#undef DO_
}

void Mouse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mouse)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool connected = 2;
  if (has_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->connected(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .Button buttons = 4;
  for (int i = 0; i < this->buttons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buttons(i), output);
  }

  // repeated .Wheel wheels = 5;
  for (int i = 0; i < this->wheels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->wheels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Mouse)
}

::google::protobuf::uint8* Mouse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mouse)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bool connected = 2;
  if (has_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->connected(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .Button buttons = 4;
  for (int i = 0; i < this->buttons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buttons(i), target);
  }

  // repeated .Wheel wheels = 5;
  for (int i = 0; i < this->wheels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->wheels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mouse)
  return target;
}

int Mouse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool connected = 2;
    if (has_connected()) {
      total_size += 1 + 1;
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Button buttons = 4;
  total_size += 1 * this->buttons_size();
  for (int i = 0; i < this->buttons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buttons(i));
  }

  // repeated .Wheel wheels = 5;
  total_size += 1 * this->wheels_size();
  for (int i = 0; i < this->wheels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wheels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mouse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mouse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mouse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mouse::MergeFrom(const Mouse& from) {
  GOOGLE_CHECK_NE(&from, this);
  buttons_.MergeFrom(from.buttons_);
  wheels_.MergeFrom(from.wheels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_connected()) {
      set_connected(from.connected());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mouse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mouse::CopyFrom(const Mouse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mouse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->buttons())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->wheels())) return false;
  return true;
}

void Mouse::Swap(Mouse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(connected_, other->connected_);
    std::swap(name_, other->name_);
    buttons_.Swap(&other->buttons_);
    wheels_.Swap(&other->wheels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mouse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mouse_descriptor_;
  metadata.reflection = Mouse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataDescription::kNameFieldNumber;
const int DataDescription::kDdIdFieldNumber;
const int DataDescription::kItemIdFieldNumber;
const int DataDescription::kParentIdFieldNumber;
const int DataDescription::kParentOffsetXFieldNumber;
const int DataDescription::kParentOffsetYFieldNumber;
const int DataDescription::kParentOffsetZFieldNumber;
#endif  // !_MSC_VER

DataDescription::DataDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataDescription)
}

void DataDescription::InitAsDefaultInstance() {
}

DataDescription::DataDescription(const DataDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataDescription)
}

void DataDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dd_id_ = 0;
  item_id_ = 0;
  parentid_ = 0;
  parentoffsetx_ = 0;
  parentoffsety_ = 0;
  parentoffsetz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataDescription::~DataDescription() {
  // @@protoc_insertion_point(destructor:DataDescription)
  SharedDtor();
}

void DataDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DataDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataDescription_descriptor_;
}

const DataDescription& DataDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fprotocol_2eproto();
  return *default_instance_;
}

DataDescription* DataDescription::default_instance_ = NULL;

DataDescription* DataDescription::New() const {
  return new DataDescription;
}

void DataDescription::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DataDescription*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(dd_id_, parentoffsetz_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dd_id;
        break;
      }

      // required int32 dd_id = 2;
      case 2: {
        if (tag == 16) {
         parse_dd_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dd_id_)));
          set_has_dd_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // required int32 item_id = 3;
      case 3: {
        if (tag == 24) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_parentId;
        break;
      }

      // required sint32 parentId = 4;
      case 4: {
        if (tag == 32) {
         parse_parentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &parentid_)));
          set_has_parentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_parentOffsetX;
        break;
      }

      // required sint32 parentOffsetX = 5;
      case 5: {
        if (tag == 40) {
         parse_parentOffsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &parentoffsetx_)));
          set_has_parentoffsetx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_parentOffsetY;
        break;
      }

      // required sint32 parentOffsetY = 6;
      case 6: {
        if (tag == 48) {
         parse_parentOffsetY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &parentoffsety_)));
          set_has_parentoffsety();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_parentOffsetZ;
        break;
      }

      // required sint32 parentOffsetZ = 7;
      case 7: {
        if (tag == 56) {
         parse_parentOffsetZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &parentoffsetz_)));
          set_has_parentoffsetz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataDescription)
  return false;
#undef DO_
}

void DataDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataDescription)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 dd_id = 2;
  if (has_dd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dd_id(), output);
  }

  // required int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }

  // required sint32 parentId = 4;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->parentid(), output);
  }

  // required sint32 parentOffsetX = 5;
  if (has_parentoffsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->parentoffsetx(), output);
  }

  // required sint32 parentOffsetY = 6;
  if (has_parentoffsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->parentoffsety(), output);
  }

  // required sint32 parentOffsetZ = 7;
  if (has_parentoffsetz()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->parentoffsetz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataDescription)
}

::google::protobuf::uint8* DataDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataDescription)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 dd_id = 2;
  if (has_dd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dd_id(), target);
  }

  // required int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }

  // required sint32 parentId = 4;
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->parentid(), target);
  }

  // required sint32 parentOffsetX = 5;
  if (has_parentoffsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->parentoffsetx(), target);
  }

  // required sint32 parentOffsetY = 6;
  if (has_parentoffsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->parentoffsety(), target);
  }

  // required sint32 parentOffsetZ = 7;
  if (has_parentoffsetz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->parentoffsetz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataDescription)
  return target;
}

int DataDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 dd_id = 2;
    if (has_dd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dd_id());
    }

    // required int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required sint32 parentId = 4;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->parentid());
    }

    // required sint32 parentOffsetX = 5;
    if (has_parentoffsetx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->parentoffsetx());
    }

    // required sint32 parentOffsetY = 6;
    if (has_parentoffsety()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->parentoffsety());
    }

    // required sint32 parentOffsetZ = 7;
    if (has_parentoffsetz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->parentoffsetz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataDescription::MergeFrom(const DataDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_dd_id()) {
      set_dd_id(from.dd_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_parentid()) {
      set_parentid(from.parentid());
    }
    if (from.has_parentoffsetx()) {
      set_parentoffsetx(from.parentoffsetx());
    }
    if (from.has_parentoffsety()) {
      set_parentoffsety(from.parentoffsety());
    }
    if (from.has_parentoffsetz()) {
      set_parentoffsetz(from.parentoffsetz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataDescription::CopyFrom(const DataDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void DataDescription::Swap(DataDescription* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(dd_id_, other->dd_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(parentid_, other->parentid_);
    std::swap(parentoffsetx_, other->parentoffsetx_);
    std::swap(parentoffsety_, other->parentoffsety_);
    std::swap(parentoffsetz_, other->parentoffsetz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataDescription_descriptor_;
  metadata.reflection = DataDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LabeledMarker::kIdFieldNumber;
const int LabeledMarker::kSizeFieldNumber;
const int LabeledMarker::kPositionFieldNumber;
#endif  // !_MSC_VER

LabeledMarker::LabeledMarker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabeledMarker)
}

void LabeledMarker::InitAsDefaultInstance() {
  position_ = const_cast< ::Position*>(&::Position::default_instance());
}

LabeledMarker::LabeledMarker(const LabeledMarker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LabeledMarker)
}

void LabeledMarker::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  size_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabeledMarker::~LabeledMarker() {
  // @@protoc_insertion_point(destructor:LabeledMarker)
  SharedDtor();
}

void LabeledMarker::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void LabeledMarker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabeledMarker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabeledMarker_descriptor_;
}

const LabeledMarker& LabeledMarker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fprotocol_2eproto();
  return *default_instance_;
}

LabeledMarker* LabeledMarker::default_instance_ = NULL;

LabeledMarker* LabeledMarker::New() const {
  return new LabeledMarker;
}

void LabeledMarker::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    size_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabeledMarker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabeledMarker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_size;
        break;
      }

      // required double size = 2;
      case 2: {
        if (tag == 17) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // required .Position position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabeledMarker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabeledMarker)
  return false;
#undef DO_
}

void LabeledMarker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabeledMarker)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required double size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->size(), output);
  }

  // required .Position position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LabeledMarker)
}

::google::protobuf::uint8* LabeledMarker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabeledMarker)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required double size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->size(), target);
  }

  // required .Position position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabeledMarker)
  return target;
}

int LabeledMarker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required double size = 2;
    if (has_size()) {
      total_size += 1 + 8;
    }

    // required .Position position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabeledMarker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabeledMarker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabeledMarker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabeledMarker::MergeFrom(const LabeledMarker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_position()) {
      mutable_position()->::Position::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabeledMarker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledMarker::CopyFrom(const LabeledMarker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledMarker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void LabeledMarker::Swap(LabeledMarker* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(size_, other->size_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabeledMarker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabeledMarker_descriptor_;
  metadata.reflection = LabeledMarker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RigidBody::kIdFieldNumber;
const int RigidBody::kTrackingValidFieldNumber;
const int RigidBody::kMeanErrorFieldNumber;
const int RigidBody::kPositionFieldNumber;
const int RigidBody::kQuaternionFieldNumber;
const int RigidBody::kMarkersFieldNumber;
#endif  // !_MSC_VER

RigidBody::RigidBody()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RigidBody)
}

void RigidBody::InitAsDefaultInstance() {
  position_ = const_cast< ::Position*>(&::Position::default_instance());
  quaternion_ = const_cast< ::Quaternion*>(&::Quaternion::default_instance());
}

RigidBody::RigidBody(const RigidBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RigidBody)
}

void RigidBody::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  trackingvalid_ = false;
  meanerror_ = 0;
  position_ = NULL;
  quaternion_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RigidBody::~RigidBody() {
  // @@protoc_insertion_point(destructor:RigidBody)
  SharedDtor();
}

void RigidBody::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete quaternion_;
  }
}

void RigidBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RigidBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RigidBody_descriptor_;
}

const RigidBody& RigidBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fprotocol_2eproto();
  return *default_instance_;
}

RigidBody* RigidBody::default_instance_ = NULL;

RigidBody* RigidBody::New() const {
  return new RigidBody;
}

void RigidBody::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RigidBody*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, trackingvalid_);
    meanerror_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::Position::Clear();
    }
    if (has_quaternion()) {
      if (quaternion_ != NULL) quaternion_->::Quaternion::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  markers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RigidBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RigidBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trackingValid;
        break;
      }

      // required bool trackingValid = 2;
      case 2: {
        if (tag == 16) {
         parse_trackingValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trackingvalid_)));
          set_has_trackingvalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_meanError;
        break;
      }

      // required float meanError = 3;
      case 3: {
        if (tag == 29) {
         parse_meanError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meanerror_)));
          set_has_meanerror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }

      // required .Position position = 4;
      case 4: {
        if (tag == 34) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_quaternion;
        break;
      }

      // required .Quaternion quaternion = 5;
      case 5: {
        if (tag == 42) {
         parse_quaternion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quaternion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_markers;
        break;
      }

      // repeated .LabeledMarker markers = 6;
      case 6: {
        if (tag == 50) {
         parse_markers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_markers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_markers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RigidBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RigidBody)
  return false;
#undef DO_
}

void RigidBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RigidBody)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool trackingValid = 2;
  if (has_trackingvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trackingvalid(), output);
  }

  // required float meanError = 3;
  if (has_meanerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->meanerror(), output);
  }

  // required .Position position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }

  // required .Quaternion quaternion = 5;
  if (has_quaternion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->quaternion(), output);
  }

  // repeated .LabeledMarker markers = 6;
  for (int i = 0; i < this->markers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->markers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RigidBody)
}

::google::protobuf::uint8* RigidBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RigidBody)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bool trackingValid = 2;
  if (has_trackingvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trackingvalid(), target);
  }

  // required float meanError = 3;
  if (has_meanerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->meanerror(), target);
  }

  // required .Position position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }

  // required .Quaternion quaternion = 5;
  if (has_quaternion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->quaternion(), target);
  }

  // repeated .LabeledMarker markers = 6;
  for (int i = 0; i < this->markers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->markers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RigidBody)
  return target;
}

int RigidBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool trackingValid = 2;
    if (has_trackingvalid()) {
      total_size += 1 + 1;
    }

    // required float meanError = 3;
    if (has_meanerror()) {
      total_size += 1 + 4;
    }

    // required .Position position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .Quaternion quaternion = 5;
    if (has_quaternion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quaternion());
    }

  }
  // repeated .LabeledMarker markers = 6;
  total_size += 1 * this->markers_size();
  for (int i = 0; i < this->markers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->markers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RigidBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RigidBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RigidBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RigidBody::MergeFrom(const RigidBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  markers_.MergeFrom(from.markers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_trackingvalid()) {
      set_trackingvalid(from.trackingvalid());
    }
    if (from.has_meanerror()) {
      set_meanerror(from.meanerror());
    }
    if (from.has_position()) {
      mutable_position()->::Position::MergeFrom(from.position());
    }
    if (from.has_quaternion()) {
      mutable_quaternion()->::Quaternion::MergeFrom(from.quaternion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RigidBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RigidBody::CopyFrom(const RigidBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RigidBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_quaternion()) {
    if (!this->quaternion().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->markers())) return false;
  return true;
}

void RigidBody::Swap(RigidBody* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(trackingvalid_, other->trackingvalid_);
    std::swap(meanerror_, other->meanerror_);
    std::swap(position_, other->position_);
    std::swap(quaternion_, other->quaternion_);
    markers_.Swap(&other->markers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RigidBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RigidBody_descriptor_;
  metadata.reflection = RigidBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Motive::kDuringRecordingFieldNumber;
const int Motive::kTrackedModelsChangedFieldNumber;
const int Motive::kTimecodeFieldNumber;
const int Motive::kDescriptionsFieldNumber;
const int Motive::kRigidBodiesFieldNumber;
#endif  // !_MSC_VER

Motive::Motive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Motive)
}

void Motive::InitAsDefaultInstance() {
}

Motive::Motive(const Motive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Motive)
}

void Motive::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  duringrecording_ = false;
  trackedmodelschanged_ = false;
  timecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Motive::~Motive() {
  // @@protoc_insertion_point(destructor:Motive)
  SharedDtor();
}

void Motive::SharedDtor() {
  if (timecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timecode_;
  }
  if (this != default_instance_) {
  }
}

void Motive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Motive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Motive_descriptor_;
}

const Motive& Motive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fprotocol_2eproto();
  return *default_instance_;
}

Motive* Motive::default_instance_ = NULL;

Motive* Motive::New() const {
  return new Motive;
}

void Motive::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Motive*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(duringrecording_, trackedmodelschanged_);
    if (has_timecode()) {
      if (timecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timecode_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  descriptions_.Clear();
  rigid_bodies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Motive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Motive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool duringRecording = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &duringrecording_)));
          set_has_duringrecording();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trackedModelsChanged;
        break;
      }

      // required bool trackedModelsChanged = 2;
      case 2: {
        if (tag == 16) {
         parse_trackedModelsChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trackedmodelschanged_)));
          set_has_trackedmodelschanged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timecode;
        break;
      }

      // optional string timecode = 3;
      case 3: {
        if (tag == 26) {
         parse_timecode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timecode().data(), this->timecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_descriptions;
        break;
      }

      // repeated .DataDescription descriptions = 4;
      case 4: {
        if (tag == 34) {
         parse_descriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_descriptions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_descriptions;
        if (input->ExpectTag(42)) goto parse_rigid_bodies;
        break;
      }

      // repeated .RigidBody rigid_bodies = 5;
      case 5: {
        if (tag == 42) {
         parse_rigid_bodies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rigid_bodies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rigid_bodies;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Motive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Motive)
  return false;
#undef DO_
}

void Motive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Motive)
  // required bool duringRecording = 1;
  if (has_duringrecording()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->duringrecording(), output);
  }

  // required bool trackedModelsChanged = 2;
  if (has_trackedmodelschanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trackedmodelschanged(), output);
  }

  // optional string timecode = 3;
  if (has_timecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timecode().data(), this->timecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timecode(), output);
  }

  // repeated .DataDescription descriptions = 4;
  for (int i = 0; i < this->descriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->descriptions(i), output);
  }

  // repeated .RigidBody rigid_bodies = 5;
  for (int i = 0; i < this->rigid_bodies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rigid_bodies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Motive)
}

::google::protobuf::uint8* Motive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Motive)
  // required bool duringRecording = 1;
  if (has_duringrecording()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->duringrecording(), target);
  }

  // required bool trackedModelsChanged = 2;
  if (has_trackedmodelschanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trackedmodelschanged(), target);
  }

  // optional string timecode = 3;
  if (has_timecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timecode().data(), this->timecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timecode(), target);
  }

  // repeated .DataDescription descriptions = 4;
  for (int i = 0; i < this->descriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->descriptions(i), target);
  }

  // repeated .RigidBody rigid_bodies = 5;
  for (int i = 0; i < this->rigid_bodies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rigid_bodies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Motive)
  return target;
}

int Motive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool duringRecording = 1;
    if (has_duringrecording()) {
      total_size += 1 + 1;
    }

    // required bool trackedModelsChanged = 2;
    if (has_trackedmodelschanged()) {
      total_size += 1 + 1;
    }

    // optional string timecode = 3;
    if (has_timecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timecode());
    }

  }
  // repeated .DataDescription descriptions = 4;
  total_size += 1 * this->descriptions_size();
  for (int i = 0; i < this->descriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->descriptions(i));
  }

  // repeated .RigidBody rigid_bodies = 5;
  total_size += 1 * this->rigid_bodies_size();
  for (int i = 0; i < this->rigid_bodies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rigid_bodies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Motive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Motive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Motive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Motive::MergeFrom(const Motive& from) {
  GOOGLE_CHECK_NE(&from, this);
  descriptions_.MergeFrom(from.descriptions_);
  rigid_bodies_.MergeFrom(from.rigid_bodies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duringrecording()) {
      set_duringrecording(from.duringrecording());
    }
    if (from.has_trackedmodelschanged()) {
      set_trackedmodelschanged(from.trackedmodelschanged());
    }
    if (from.has_timecode()) {
      set_timecode(from.timecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Motive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Motive::CopyFrom(const Motive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->descriptions())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rigid_bodies())) return false;
  return true;
}

void Motive::Swap(Motive* other) {
  if (other != this) {
    std::swap(duringrecording_, other->duringrecording_);
    std::swap(trackedmodelschanged_, other->trackedmodelschanged_);
    std::swap(timecode_, other->timecode_);
    descriptions_.Swap(&other->descriptions_);
    rigid_bodies_.Swap(&other->rigid_bodies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Motive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Motive_descriptor_;
  metadata.reflection = Motive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Update::kIdFieldNumber;
const int Update::kModVersionFieldNumber;
const int Update::kTimeFieldNumber;
const int Update::kMotiveFieldNumber;
const int Update::kMiceFieldNumber;
const int Update::kStrokesFieldNumber;
#endif  // !_MSC_VER

Update::Update()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Update)
}

void Update::InitAsDefaultInstance() {
  motive_ = const_cast< ::Motive*>(&::Motive::default_instance());
}

Update::Update(const Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Update)
}

void Update::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mod_version_ = 0;
  time_ = 0;
  motive_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Update::~Update() {
  // @@protoc_insertion_point(destructor:Update)
  SharedDtor();
}

void Update::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
    delete motive_;
  }
}

void Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Update_descriptor_;
}

const Update& Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fprotocol_2eproto();
  return *default_instance_;
}

Update* Update::default_instance_ = NULL;

Update* Update::New() const {
  return new Update;
}

void Update::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Update*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mod_version_, time_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_motive()) {
      if (motive_ != NULL) motive_->::Motive::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mice_.Clear();
  strokes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mod_version;
        break;
      }

      // required int32 mod_version = 2;
      case 2: {
        if (tag == 16) {
         parse_mod_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mod_version_)));
          set_has_mod_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_motive;
        break;
      }

      // optional .Motive motive = 4;
      case 4: {
        if (tag == 34) {
         parse_motive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motive()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mice;
        break;
      }

      // repeated .Mouse mice = 5;
      case 5: {
        if (tag == 42) {
         parse_mice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mice;
        if (input->ExpectTag(50)) goto parse_strokes;
        break;
      }

      // repeated .Position strokes = 6;
      case 6: {
        if (tag == 50) {
         parse_strokes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strokes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_strokes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Update)
  return false;
#undef DO_
}

void Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Update)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int32 mod_version = 2;
  if (has_mod_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mod_version(), output);
  }

  // required int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional .Motive motive = 4;
  if (has_motive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->motive(), output);
  }

  // repeated .Mouse mice = 5;
  for (int i = 0; i < this->mice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mice(i), output);
  }

  // repeated .Position strokes = 6;
  for (int i = 0; i < this->strokes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->strokes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Update)
}

::google::protobuf::uint8* Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Update)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 mod_version = 2;
  if (has_mod_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mod_version(), target);
  }

  // required int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional .Motive motive = 4;
  if (has_motive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->motive(), target);
  }

  // repeated .Mouse mice = 5;
  for (int i = 0; i < this->mice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mice(i), target);
  }

  // repeated .Position strokes = 6;
  for (int i = 0; i < this->strokes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->strokes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Update)
  return target;
}

int Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 mod_version = 2;
    if (has_mod_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mod_version());
    }

    // required int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional .Motive motive = 4;
    if (has_motive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motive());
    }

  }
  // repeated .Mouse mice = 5;
  total_size += 1 * this->mice_size();
  for (int i = 0; i < this->mice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mice(i));
  }

  // repeated .Position strokes = 6;
  total_size += 1 * this->strokes_size();
  for (int i = 0; i < this->strokes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strokes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Update::MergeFrom(const Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  mice_.MergeFrom(from.mice_);
  strokes_.MergeFrom(from.strokes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mod_version()) {
      set_mod_version(from.mod_version());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_motive()) {
      mutable_motive()->::Motive::MergeFrom(from.motive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Update::CopyFrom(const Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_motive()) {
    if (!this->motive().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->mice())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->strokes())) return false;
  return true;
}

void Update::Swap(Update* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mod_version_, other->mod_version_);
    std::swap(time_, other->time_);
    std::swap(motive_, other->motive_);
    mice_.Swap(&other->mice_);
    strokes_.Swap(&other->strokes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Update_descriptor_;
  metadata.reflection = Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Updates::kModVersionFieldNumber;
const int Updates::kUpdatesFieldNumber;
#endif  // !_MSC_VER

Updates::Updates()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Updates)
}

void Updates::InitAsDefaultInstance() {
}

Updates::Updates(const Updates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Updates)
}

void Updates::SharedCtor() {
  _cached_size_ = 0;
  mod_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Updates::~Updates() {
  // @@protoc_insertion_point(destructor:Updates)
  SharedDtor();
}

void Updates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Updates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Updates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Updates_descriptor_;
}

const Updates& Updates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_update_5fprotocol_2eproto();
  return *default_instance_;
}

Updates* Updates::default_instance_ = NULL;

Updates* Updates::New() const {
  return new Updates;
}

void Updates::Clear() {
  mod_version_ = 0;
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Updates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Updates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mod_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mod_version_)));
          set_has_mod_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_updates;
        break;
      }

      // repeated .Update updates = 2;
      case 2: {
        if (tag == 18) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_updates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Updates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Updates)
  return false;
#undef DO_
}

void Updates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Updates)
  // required int32 mod_version = 1;
  if (has_mod_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mod_version(), output);
  }

  // repeated .Update updates = 2;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Updates)
}

::google::protobuf::uint8* Updates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Updates)
  // required int32 mod_version = 1;
  if (has_mod_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mod_version(), target);
  }

  // repeated .Update updates = 2;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Updates)
  return target;
}

int Updates::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mod_version = 1;
    if (has_mod_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mod_version());
    }

  }
  // repeated .Update updates = 2;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Updates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Updates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Updates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Updates::MergeFrom(const Updates& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mod_version()) {
      set_mod_version(from.mod_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Updates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Updates::CopyFrom(const Updates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Updates::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->updates())) return false;
  return true;
}

void Updates::Swap(Updates* other) {
  if (other != this) {
    std::swap(mod_version_, other->mod_version_);
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Updates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Updates_descriptor_;
  metadata.reflection = Updates_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
