// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: update_protocol.proto

#ifndef PROTOBUF_update_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_update_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_update_5fprotocol_2eproto();
void protobuf_AssignDesc_update_5fprotocol_2eproto();
void protobuf_ShutdownFile_update_5fprotocol_2eproto();

class Position;
class Quaternion;
class Wheel;
class Button;
class Mouse;
class DataDescription;
class LabeledMarker;
class RigidBody;
class Motive;
class Update;
class Updates;

// ===================================================================

class Position : public ::google::protobuf::Message {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  Position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:Position)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_update_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_update_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_update_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class Quaternion : public ::google::protobuf::Message {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaternion& default_instance();

  void Swap(Quaternion* other);

  // implements Message ----------------------------------------------

  Quaternion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // required double w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline double w() const;
  inline void set_w(double value);

  // @@protoc_insertion_point(class_scope:Quaternion)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double w_;
  friend void  protobuf_AddDesc_update_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_update_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_update_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Quaternion* default_instance_;
};
// -------------------------------------------------------------------

class Wheel : public ::google::protobuf::Message {
 public:
  Wheel();
  virtual ~Wheel();

  Wheel(const Wheel& from);

  inline Wheel& operator=(const Wheel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wheel& default_instance();

  void Swap(Wheel* other);

  // implements Message ----------------------------------------------

  Wheel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wheel& from);
  void MergeFrom(const Wheel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string direction = 2;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 2;
  inline const ::std::string& direction() const;
  inline void set_direction(const ::std::string& value);
  inline void set_direction(const char* value);
  inline void set_direction(const char* value, size_t size);
  inline ::std::string* mutable_direction();
  inline ::std::string* release_direction();
  inline void set_allocated_direction(::std::string* direction);

  // required int32 tick = 3;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 3;
  inline ::google::protobuf::int32 tick() const;
  inline void set_tick(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Wheel)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_tick();
  inline void clear_has_tick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* direction_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 tick_;
  friend void  protobuf_AddDesc_update_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_update_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_update_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Wheel* default_instance_;
};
// -------------------------------------------------------------------

class Button : public ::google::protobuf::Message {
 public:
  Button();
  virtual ~Button();

  Button(const Button& from);

  inline Button& operator=(const Button& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Button& default_instance();

  void Swap(Button* other);

  // implements Message ----------------------------------------------

  Button* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Button& from);
  void MergeFrom(const Button& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const char* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // @@protoc_insertion_point(class_scope:Button)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* state_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_update_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_update_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_update_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Button* default_instance_;
};
// -------------------------------------------------------------------

class Mouse : public ::google::protobuf::Message {
 public:
  Mouse();
  virtual ~Mouse();

  Mouse(const Mouse& from);

  inline Mouse& operator=(const Mouse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mouse& default_instance();

  void Swap(Mouse* other);

  // implements Message ----------------------------------------------

  Mouse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mouse& from);
  void MergeFrom(const Mouse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required bool connected = 2;
  inline bool has_connected() const;
  inline void clear_connected();
  static const int kConnectedFieldNumber = 2;
  inline bool connected() const;
  inline void set_connected(bool value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .Button buttons = 4;
  inline int buttons_size() const;
  inline void clear_buttons();
  static const int kButtonsFieldNumber = 4;
  inline const ::Button& buttons(int index) const;
  inline ::Button* mutable_buttons(int index);
  inline ::Button* add_buttons();
  inline const ::google::protobuf::RepeatedPtrField< ::Button >&
      buttons() const;
  inline ::google::protobuf::RepeatedPtrField< ::Button >*
      mutable_buttons();

  // repeated .Wheel wheels = 5;
  inline int wheels_size() const;
  inline void clear_wheels();
  static const int kWheelsFieldNumber = 5;
  inline const ::Wheel& wheels(int index) const;
  inline ::Wheel* mutable_wheels(int index);
  inline ::Wheel* add_wheels();
  inline const ::google::protobuf::RepeatedPtrField< ::Wheel >&
      wheels() const;
  inline ::google::protobuf::RepeatedPtrField< ::Wheel >*
      mutable_wheels();

  // @@protoc_insertion_point(class_scope:Mouse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_connected();
  inline void clear_has_connected();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  bool connected_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Button > buttons_;
  ::google::protobuf::RepeatedPtrField< ::Wheel > wheels_;
  friend void  protobuf_AddDesc_update_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_update_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_update_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Mouse* default_instance_;
};
// -------------------------------------------------------------------

class DataDescription : public ::google::protobuf::Message {
 public:
  DataDescription();
  virtual ~DataDescription();

  DataDescription(const DataDescription& from);

  inline DataDescription& operator=(const DataDescription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataDescription& default_instance();

  void Swap(DataDescription* other);

  // implements Message ----------------------------------------------

  DataDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataDescription& from);
  void MergeFrom(const DataDescription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 dd_id = 2;
  inline bool has_dd_id() const;
  inline void clear_dd_id();
  static const int kDdIdFieldNumber = 2;
  inline ::google::protobuf::int32 dd_id() const;
  inline void set_dd_id(::google::protobuf::int32 value);

  // required int32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // required sint32 parentId = 4;
  inline bool has_parentid() const;
  inline void clear_parentid();
  static const int kParentIdFieldNumber = 4;
  inline ::google::protobuf::int32 parentid() const;
  inline void set_parentid(::google::protobuf::int32 value);

  // required sint32 parentOffsetX = 5;
  inline bool has_parentoffsetx() const;
  inline void clear_parentoffsetx();
  static const int kParentOffsetXFieldNumber = 5;
  inline ::google::protobuf::int32 parentoffsetx() const;
  inline void set_parentoffsetx(::google::protobuf::int32 value);

  // required sint32 parentOffsetY = 6;
  inline bool has_parentoffsety() const;
  inline void clear_parentoffsety();
  static const int kParentOffsetYFieldNumber = 6;
  inline ::google::protobuf::int32 parentoffsety() const;
  inline void set_parentoffsety(::google::protobuf::int32 value);

  // required sint32 parentOffsetZ = 7;
  inline bool has_parentoffsetz() const;
  inline void clear_parentoffsetz();
  static const int kParentOffsetZFieldNumber = 7;
  inline ::google::protobuf::int32 parentoffsetz() const;
  inline void set_parentoffsetz(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DataDescription)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_dd_id();
  inline void clear_has_dd_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_parentid();
  inline void clear_has_parentid();
  inline void set_has_parentoffsetx();
  inline void clear_has_parentoffsetx();
  inline void set_has_parentoffsety();
  inline void clear_has_parentoffsety();
  inline void set_has_parentoffsetz();
  inline void clear_has_parentoffsetz();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 dd_id_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 parentid_;
  ::google::protobuf::int32 parentoffsetx_;
  ::google::protobuf::int32 parentoffsety_;
  ::google::protobuf::int32 parentoffsetz_;
  friend void  protobuf_AddDesc_update_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_update_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_update_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static DataDescription* default_instance_;
};
// -------------------------------------------------------------------

class LabeledMarker : public ::google::protobuf::Message {
 public:
  LabeledMarker();
  virtual ~LabeledMarker();

  LabeledMarker(const LabeledMarker& from);

  inline LabeledMarker& operator=(const LabeledMarker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabeledMarker& default_instance();

  void Swap(LabeledMarker* other);

  // implements Message ----------------------------------------------

  LabeledMarker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabeledMarker& from);
  void MergeFrom(const LabeledMarker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required double size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline double size() const;
  inline void set_size(double value);

  // required .Position position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::Position& position() const;
  inline ::Position* mutable_position();
  inline ::Position* release_position();
  inline void set_allocated_position(::Position* position);

  // @@protoc_insertion_point(class_scope:LabeledMarker)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double size_;
  ::Position* position_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_update_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_update_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_update_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static LabeledMarker* default_instance_;
};
// -------------------------------------------------------------------

class RigidBody : public ::google::protobuf::Message {
 public:
  RigidBody();
  virtual ~RigidBody();

  RigidBody(const RigidBody& from);

  inline RigidBody& operator=(const RigidBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RigidBody& default_instance();

  void Swap(RigidBody* other);

  // implements Message ----------------------------------------------

  RigidBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RigidBody& from);
  void MergeFrom(const RigidBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required bool trackingValid = 2;
  inline bool has_trackingvalid() const;
  inline void clear_trackingvalid();
  static const int kTrackingValidFieldNumber = 2;
  inline bool trackingvalid() const;
  inline void set_trackingvalid(bool value);

  // required float meanError = 3;
  inline bool has_meanerror() const;
  inline void clear_meanerror();
  static const int kMeanErrorFieldNumber = 3;
  inline float meanerror() const;
  inline void set_meanerror(float value);

  // required .Position position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::Position& position() const;
  inline ::Position* mutable_position();
  inline ::Position* release_position();
  inline void set_allocated_position(::Position* position);

  // required .Quaternion quaternion = 5;
  inline bool has_quaternion() const;
  inline void clear_quaternion();
  static const int kQuaternionFieldNumber = 5;
  inline const ::Quaternion& quaternion() const;
  inline ::Quaternion* mutable_quaternion();
  inline ::Quaternion* release_quaternion();
  inline void set_allocated_quaternion(::Quaternion* quaternion);

  // repeated .LabeledMarker markers = 6;
  inline int markers_size() const;
  inline void clear_markers();
  static const int kMarkersFieldNumber = 6;
  inline const ::LabeledMarker& markers(int index) const;
  inline ::LabeledMarker* mutable_markers(int index);
  inline ::LabeledMarker* add_markers();
  inline const ::google::protobuf::RepeatedPtrField< ::LabeledMarker >&
      markers() const;
  inline ::google::protobuf::RepeatedPtrField< ::LabeledMarker >*
      mutable_markers();

  // @@protoc_insertion_point(class_scope:RigidBody)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_trackingvalid();
  inline void clear_has_trackingvalid();
  inline void set_has_meanerror();
  inline void clear_has_meanerror();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_quaternion();
  inline void clear_has_quaternion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  bool trackingvalid_;
  ::Position* position_;
  ::Quaternion* quaternion_;
  ::google::protobuf::RepeatedPtrField< ::LabeledMarker > markers_;
  float meanerror_;
  friend void  protobuf_AddDesc_update_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_update_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_update_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static RigidBody* default_instance_;
};
// -------------------------------------------------------------------

class Motive : public ::google::protobuf::Message {
 public:
  Motive();
  virtual ~Motive();

  Motive(const Motive& from);

  inline Motive& operator=(const Motive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Motive& default_instance();

  void Swap(Motive* other);

  // implements Message ----------------------------------------------

  Motive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Motive& from);
  void MergeFrom(const Motive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool duringRecording = 1;
  inline bool has_duringrecording() const;
  inline void clear_duringrecording();
  static const int kDuringRecordingFieldNumber = 1;
  inline bool duringrecording() const;
  inline void set_duringrecording(bool value);

  // required bool trackedModelsChanged = 2;
  inline bool has_trackedmodelschanged() const;
  inline void clear_trackedmodelschanged();
  static const int kTrackedModelsChangedFieldNumber = 2;
  inline bool trackedmodelschanged() const;
  inline void set_trackedmodelschanged(bool value);

  // optional string timecode = 3;
  inline bool has_timecode() const;
  inline void clear_timecode();
  static const int kTimecodeFieldNumber = 3;
  inline const ::std::string& timecode() const;
  inline void set_timecode(const ::std::string& value);
  inline void set_timecode(const char* value);
  inline void set_timecode(const char* value, size_t size);
  inline ::std::string* mutable_timecode();
  inline ::std::string* release_timecode();
  inline void set_allocated_timecode(::std::string* timecode);

  // repeated .DataDescription descriptions = 4;
  inline int descriptions_size() const;
  inline void clear_descriptions();
  static const int kDescriptionsFieldNumber = 4;
  inline const ::DataDescription& descriptions(int index) const;
  inline ::DataDescription* mutable_descriptions(int index);
  inline ::DataDescription* add_descriptions();
  inline const ::google::protobuf::RepeatedPtrField< ::DataDescription >&
      descriptions() const;
  inline ::google::protobuf::RepeatedPtrField< ::DataDescription >*
      mutable_descriptions();

  // repeated .RigidBody rigid_bodies = 5;
  inline int rigid_bodies_size() const;
  inline void clear_rigid_bodies();
  static const int kRigidBodiesFieldNumber = 5;
  inline const ::RigidBody& rigid_bodies(int index) const;
  inline ::RigidBody* mutable_rigid_bodies(int index);
  inline ::RigidBody* add_rigid_bodies();
  inline const ::google::protobuf::RepeatedPtrField< ::RigidBody >&
      rigid_bodies() const;
  inline ::google::protobuf::RepeatedPtrField< ::RigidBody >*
      mutable_rigid_bodies();

  // @@protoc_insertion_point(class_scope:Motive)
 private:
  inline void set_has_duringrecording();
  inline void clear_has_duringrecording();
  inline void set_has_trackedmodelschanged();
  inline void clear_has_trackedmodelschanged();
  inline void set_has_timecode();
  inline void clear_has_timecode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* timecode_;
  ::google::protobuf::RepeatedPtrField< ::DataDescription > descriptions_;
  ::google::protobuf::RepeatedPtrField< ::RigidBody > rigid_bodies_;
  bool duringrecording_;
  bool trackedmodelschanged_;
  friend void  protobuf_AddDesc_update_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_update_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_update_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Motive* default_instance_;
};
// -------------------------------------------------------------------

class Update : public ::google::protobuf::Message {
 public:
  Update();
  virtual ~Update();

  Update(const Update& from);

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update& default_instance();

  void Swap(Update* other);

  // implements Message ----------------------------------------------

  Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update& from);
  void MergeFrom(const Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 mod_version = 2;
  inline bool has_mod_version() const;
  inline void clear_mod_version();
  static const int kModVersionFieldNumber = 2;
  inline ::google::protobuf::int32 mod_version() const;
  inline void set_mod_version(::google::protobuf::int32 value);

  // required int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional .Motive motive = 4;
  inline bool has_motive() const;
  inline void clear_motive();
  static const int kMotiveFieldNumber = 4;
  inline const ::Motive& motive() const;
  inline ::Motive* mutable_motive();
  inline ::Motive* release_motive();
  inline void set_allocated_motive(::Motive* motive);

  // repeated .Mouse mice = 5;
  inline int mice_size() const;
  inline void clear_mice();
  static const int kMiceFieldNumber = 5;
  inline const ::Mouse& mice(int index) const;
  inline ::Mouse* mutable_mice(int index);
  inline ::Mouse* add_mice();
  inline const ::google::protobuf::RepeatedPtrField< ::Mouse >&
      mice() const;
  inline ::google::protobuf::RepeatedPtrField< ::Mouse >*
      mutable_mice();

  // repeated .Position strokes = 6;
  inline int strokes_size() const;
  inline void clear_strokes();
  static const int kStrokesFieldNumber = 6;
  inline const ::Position& strokes(int index) const;
  inline ::Position* mutable_strokes(int index);
  inline ::Position* add_strokes();
  inline const ::google::protobuf::RepeatedPtrField< ::Position >&
      strokes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Position >*
      mutable_strokes();

  // @@protoc_insertion_point(class_scope:Update)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mod_version();
  inline void clear_has_mod_version();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_motive();
  inline void clear_has_motive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int32 mod_version_;
  ::google::protobuf::int32 time_;
  ::Motive* motive_;
  ::google::protobuf::RepeatedPtrField< ::Mouse > mice_;
  ::google::protobuf::RepeatedPtrField< ::Position > strokes_;
  friend void  protobuf_AddDesc_update_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_update_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_update_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Update* default_instance_;
};
// -------------------------------------------------------------------

class Updates : public ::google::protobuf::Message {
 public:
  Updates();
  virtual ~Updates();

  Updates(const Updates& from);

  inline Updates& operator=(const Updates& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Updates& default_instance();

  void Swap(Updates* other);

  // implements Message ----------------------------------------------

  Updates* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Updates& from);
  void MergeFrom(const Updates& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mod_version = 1;
  inline bool has_mod_version() const;
  inline void clear_mod_version();
  static const int kModVersionFieldNumber = 1;
  inline ::google::protobuf::int32 mod_version() const;
  inline void set_mod_version(::google::protobuf::int32 value);

  // repeated .Update updates = 2;
  inline int updates_size() const;
  inline void clear_updates();
  static const int kUpdatesFieldNumber = 2;
  inline const ::Update& updates(int index) const;
  inline ::Update* mutable_updates(int index);
  inline ::Update* add_updates();
  inline const ::google::protobuf::RepeatedPtrField< ::Update >&
      updates() const;
  inline ::google::protobuf::RepeatedPtrField< ::Update >*
      mutable_updates();

  // @@protoc_insertion_point(class_scope:Updates)
 private:
  inline void set_has_mod_version();
  inline void clear_has_mod_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Update > updates_;
  ::google::protobuf::int32 mod_version_;
  friend void  protobuf_AddDesc_update_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_update_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_update_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Updates* default_instance_;
};
// ===================================================================


// ===================================================================

// Position

// required double x = 1;
inline bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Position::x() const {
  // @@protoc_insertion_point(field_get:Position.x)
  return x_;
}
inline void Position::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Position.x)
}

// required double y = 2;
inline bool Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Position::y() const {
  // @@protoc_insertion_point(field_get:Position.y)
  return y_;
}
inline void Position::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Position.y)
}

// required double z = 3;
inline bool Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Position::z() const {
  // @@protoc_insertion_point(field_get:Position.z)
  return z_;
}
inline void Position::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Position.z)
}

// -------------------------------------------------------------------

// Quaternion

// required double x = 1;
inline bool Quaternion::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Quaternion::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Quaternion::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Quaternion::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Quaternion::x() const {
  // @@protoc_insertion_point(field_get:Quaternion.x)
  return x_;
}
inline void Quaternion::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.x)
}

// required double y = 2;
inline bool Quaternion::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Quaternion::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Quaternion::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Quaternion::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Quaternion::y() const {
  // @@protoc_insertion_point(field_get:Quaternion.y)
  return y_;
}
inline void Quaternion::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.y)
}

// required double z = 3;
inline bool Quaternion::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Quaternion::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Quaternion::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Quaternion::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Quaternion::z() const {
  // @@protoc_insertion_point(field_get:Quaternion.z)
  return z_;
}
inline void Quaternion::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.z)
}

// required double w = 4;
inline bool Quaternion::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Quaternion::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Quaternion::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Quaternion::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline double Quaternion::w() const {
  // @@protoc_insertion_point(field_get:Quaternion.w)
  return w_;
}
inline void Quaternion::set_w(double value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.w)
}

// -------------------------------------------------------------------

// Wheel

// required int32 id = 1;
inline bool Wheel::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wheel::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wheel::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wheel::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Wheel::id() const {
  // @@protoc_insertion_point(field_get:Wheel.id)
  return id_;
}
inline void Wheel::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Wheel.id)
}

// required string direction = 2;
inline bool Wheel::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Wheel::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Wheel::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Wheel::clear_direction() {
  if (direction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    direction_->clear();
  }
  clear_has_direction();
}
inline const ::std::string& Wheel::direction() const {
  // @@protoc_insertion_point(field_get:Wheel.direction)
  return *direction_;
}
inline void Wheel::set_direction(const ::std::string& value) {
  set_has_direction();
  if (direction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    direction_ = new ::std::string;
  }
  direction_->assign(value);
  // @@protoc_insertion_point(field_set:Wheel.direction)
}
inline void Wheel::set_direction(const char* value) {
  set_has_direction();
  if (direction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    direction_ = new ::std::string;
  }
  direction_->assign(value);
  // @@protoc_insertion_point(field_set_char:Wheel.direction)
}
inline void Wheel::set_direction(const char* value, size_t size) {
  set_has_direction();
  if (direction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    direction_ = new ::std::string;
  }
  direction_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Wheel.direction)
}
inline ::std::string* Wheel::mutable_direction() {
  set_has_direction();
  if (direction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    direction_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Wheel.direction)
  return direction_;
}
inline ::std::string* Wheel::release_direction() {
  clear_has_direction();
  if (direction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = direction_;
    direction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Wheel::set_allocated_direction(::std::string* direction) {
  if (direction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete direction_;
  }
  if (direction) {
    set_has_direction();
    direction_ = direction;
  } else {
    clear_has_direction();
    direction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Wheel.direction)
}

// required int32 tick = 3;
inline bool Wheel::has_tick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Wheel::set_has_tick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Wheel::clear_has_tick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Wheel::clear_tick() {
  tick_ = 0;
  clear_has_tick();
}
inline ::google::protobuf::int32 Wheel::tick() const {
  // @@protoc_insertion_point(field_get:Wheel.tick)
  return tick_;
}
inline void Wheel::set_tick(::google::protobuf::int32 value) {
  set_has_tick();
  tick_ = value;
  // @@protoc_insertion_point(field_set:Wheel.tick)
}

// -------------------------------------------------------------------

// Button

// required int32 id = 1;
inline bool Button::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Button::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Button::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Button::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Button::id() const {
  // @@protoc_insertion_point(field_get:Button.id)
  return id_;
}
inline void Button::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Button.id)
}

// required string state = 2;
inline bool Button::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Button::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Button::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Button::clear_state() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& Button::state() const {
  // @@protoc_insertion_point(field_get:Button.state)
  return *state_;
}
inline void Button::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set:Button.state)
}
inline void Button::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set_char:Button.state)
}
inline void Button::set_state(const char* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Button.state)
}
inline ::std::string* Button::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Button.state)
  return state_;
}
inline ::std::string* Button::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Button::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Button.state)
}

// -------------------------------------------------------------------

// Mouse

// required int32 id = 1;
inline bool Mouse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mouse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mouse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mouse::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Mouse::id() const {
  // @@protoc_insertion_point(field_get:Mouse.id)
  return id_;
}
inline void Mouse::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Mouse.id)
}

// required bool connected = 2;
inline bool Mouse::has_connected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mouse::set_has_connected() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mouse::clear_has_connected() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mouse::clear_connected() {
  connected_ = false;
  clear_has_connected();
}
inline bool Mouse::connected() const {
  // @@protoc_insertion_point(field_get:Mouse.connected)
  return connected_;
}
inline void Mouse::set_connected(bool value) {
  set_has_connected();
  connected_ = value;
  // @@protoc_insertion_point(field_set:Mouse.connected)
}

// required string name = 3;
inline bool Mouse::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mouse::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mouse::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mouse::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Mouse::name() const {
  // @@protoc_insertion_point(field_get:Mouse.name)
  return *name_;
}
inline void Mouse::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Mouse.name)
}
inline void Mouse::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Mouse.name)
}
inline void Mouse::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mouse.name)
}
inline ::std::string* Mouse::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Mouse.name)
  return name_;
}
inline ::std::string* Mouse::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Mouse::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Mouse.name)
}

// repeated .Button buttons = 4;
inline int Mouse::buttons_size() const {
  return buttons_.size();
}
inline void Mouse::clear_buttons() {
  buttons_.Clear();
}
inline const ::Button& Mouse::buttons(int index) const {
  // @@protoc_insertion_point(field_get:Mouse.buttons)
  return buttons_.Get(index);
}
inline ::Button* Mouse::mutable_buttons(int index) {
  // @@protoc_insertion_point(field_mutable:Mouse.buttons)
  return buttons_.Mutable(index);
}
inline ::Button* Mouse::add_buttons() {
  // @@protoc_insertion_point(field_add:Mouse.buttons)
  return buttons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Button >&
Mouse::buttons() const {
  // @@protoc_insertion_point(field_list:Mouse.buttons)
  return buttons_;
}
inline ::google::protobuf::RepeatedPtrField< ::Button >*
Mouse::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:Mouse.buttons)
  return &buttons_;
}

// repeated .Wheel wheels = 5;
inline int Mouse::wheels_size() const {
  return wheels_.size();
}
inline void Mouse::clear_wheels() {
  wheels_.Clear();
}
inline const ::Wheel& Mouse::wheels(int index) const {
  // @@protoc_insertion_point(field_get:Mouse.wheels)
  return wheels_.Get(index);
}
inline ::Wheel* Mouse::mutable_wheels(int index) {
  // @@protoc_insertion_point(field_mutable:Mouse.wheels)
  return wheels_.Mutable(index);
}
inline ::Wheel* Mouse::add_wheels() {
  // @@protoc_insertion_point(field_add:Mouse.wheels)
  return wheels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Wheel >&
Mouse::wheels() const {
  // @@protoc_insertion_point(field_list:Mouse.wheels)
  return wheels_;
}
inline ::google::protobuf::RepeatedPtrField< ::Wheel >*
Mouse::mutable_wheels() {
  // @@protoc_insertion_point(field_mutable_list:Mouse.wheels)
  return &wheels_;
}

// -------------------------------------------------------------------

// DataDescription

// required string name = 1;
inline bool DataDescription::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataDescription::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataDescription::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataDescription::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DataDescription::name() const {
  // @@protoc_insertion_point(field_get:DataDescription.name)
  return *name_;
}
inline void DataDescription::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:DataDescription.name)
}
inline void DataDescription::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DataDescription.name)
}
inline void DataDescription::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataDescription.name)
}
inline ::std::string* DataDescription::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DataDescription.name)
  return name_;
}
inline ::std::string* DataDescription::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataDescription::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DataDescription.name)
}

// required int32 dd_id = 2;
inline bool DataDescription::has_dd_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataDescription::set_has_dd_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataDescription::clear_has_dd_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataDescription::clear_dd_id() {
  dd_id_ = 0;
  clear_has_dd_id();
}
inline ::google::protobuf::int32 DataDescription::dd_id() const {
  // @@protoc_insertion_point(field_get:DataDescription.dd_id)
  return dd_id_;
}
inline void DataDescription::set_dd_id(::google::protobuf::int32 value) {
  set_has_dd_id();
  dd_id_ = value;
  // @@protoc_insertion_point(field_set:DataDescription.dd_id)
}

// required int32 item_id = 3;
inline bool DataDescription::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataDescription::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataDescription::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataDescription::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 DataDescription::item_id() const {
  // @@protoc_insertion_point(field_get:DataDescription.item_id)
  return item_id_;
}
inline void DataDescription::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:DataDescription.item_id)
}

// required sint32 parentId = 4;
inline bool DataDescription::has_parentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataDescription::set_has_parentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataDescription::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataDescription::clear_parentid() {
  parentid_ = 0;
  clear_has_parentid();
}
inline ::google::protobuf::int32 DataDescription::parentid() const {
  // @@protoc_insertion_point(field_get:DataDescription.parentId)
  return parentid_;
}
inline void DataDescription::set_parentid(::google::protobuf::int32 value) {
  set_has_parentid();
  parentid_ = value;
  // @@protoc_insertion_point(field_set:DataDescription.parentId)
}

// required sint32 parentOffsetX = 5;
inline bool DataDescription::has_parentoffsetx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataDescription::set_has_parentoffsetx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataDescription::clear_has_parentoffsetx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataDescription::clear_parentoffsetx() {
  parentoffsetx_ = 0;
  clear_has_parentoffsetx();
}
inline ::google::protobuf::int32 DataDescription::parentoffsetx() const {
  // @@protoc_insertion_point(field_get:DataDescription.parentOffsetX)
  return parentoffsetx_;
}
inline void DataDescription::set_parentoffsetx(::google::protobuf::int32 value) {
  set_has_parentoffsetx();
  parentoffsetx_ = value;
  // @@protoc_insertion_point(field_set:DataDescription.parentOffsetX)
}

// required sint32 parentOffsetY = 6;
inline bool DataDescription::has_parentoffsety() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataDescription::set_has_parentoffsety() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataDescription::clear_has_parentoffsety() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataDescription::clear_parentoffsety() {
  parentoffsety_ = 0;
  clear_has_parentoffsety();
}
inline ::google::protobuf::int32 DataDescription::parentoffsety() const {
  // @@protoc_insertion_point(field_get:DataDescription.parentOffsetY)
  return parentoffsety_;
}
inline void DataDescription::set_parentoffsety(::google::protobuf::int32 value) {
  set_has_parentoffsety();
  parentoffsety_ = value;
  // @@protoc_insertion_point(field_set:DataDescription.parentOffsetY)
}

// required sint32 parentOffsetZ = 7;
inline bool DataDescription::has_parentoffsetz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataDescription::set_has_parentoffsetz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataDescription::clear_has_parentoffsetz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataDescription::clear_parentoffsetz() {
  parentoffsetz_ = 0;
  clear_has_parentoffsetz();
}
inline ::google::protobuf::int32 DataDescription::parentoffsetz() const {
  // @@protoc_insertion_point(field_get:DataDescription.parentOffsetZ)
  return parentoffsetz_;
}
inline void DataDescription::set_parentoffsetz(::google::protobuf::int32 value) {
  set_has_parentoffsetz();
  parentoffsetz_ = value;
  // @@protoc_insertion_point(field_set:DataDescription.parentOffsetZ)
}

// -------------------------------------------------------------------

// LabeledMarker

// required int32 id = 1;
inline bool LabeledMarker::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabeledMarker::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabeledMarker::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabeledMarker::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 LabeledMarker::id() const {
  // @@protoc_insertion_point(field_get:LabeledMarker.id)
  return id_;
}
inline void LabeledMarker::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:LabeledMarker.id)
}

// required double size = 2;
inline bool LabeledMarker::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabeledMarker::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabeledMarker::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabeledMarker::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline double LabeledMarker::size() const {
  // @@protoc_insertion_point(field_get:LabeledMarker.size)
  return size_;
}
inline void LabeledMarker::set_size(double value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:LabeledMarker.size)
}

// required .Position position = 3;
inline bool LabeledMarker::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabeledMarker::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabeledMarker::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabeledMarker::clear_position() {
  if (position_ != NULL) position_->::Position::Clear();
  clear_has_position();
}
inline const ::Position& LabeledMarker::position() const {
  // @@protoc_insertion_point(field_get:LabeledMarker.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Position* LabeledMarker::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::Position;
  // @@protoc_insertion_point(field_mutable:LabeledMarker.position)
  return position_;
}
inline ::Position* LabeledMarker::release_position() {
  clear_has_position();
  ::Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline void LabeledMarker::set_allocated_position(::Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:LabeledMarker.position)
}

// -------------------------------------------------------------------

// RigidBody

// required int32 id = 1;
inline bool RigidBody::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RigidBody::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RigidBody::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RigidBody::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RigidBody::id() const {
  // @@protoc_insertion_point(field_get:RigidBody.id)
  return id_;
}
inline void RigidBody::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:RigidBody.id)
}

// required bool trackingValid = 2;
inline bool RigidBody::has_trackingvalid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RigidBody::set_has_trackingvalid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RigidBody::clear_has_trackingvalid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RigidBody::clear_trackingvalid() {
  trackingvalid_ = false;
  clear_has_trackingvalid();
}
inline bool RigidBody::trackingvalid() const {
  // @@protoc_insertion_point(field_get:RigidBody.trackingValid)
  return trackingvalid_;
}
inline void RigidBody::set_trackingvalid(bool value) {
  set_has_trackingvalid();
  trackingvalid_ = value;
  // @@protoc_insertion_point(field_set:RigidBody.trackingValid)
}

// required float meanError = 3;
inline bool RigidBody::has_meanerror() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RigidBody::set_has_meanerror() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RigidBody::clear_has_meanerror() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RigidBody::clear_meanerror() {
  meanerror_ = 0;
  clear_has_meanerror();
}
inline float RigidBody::meanerror() const {
  // @@protoc_insertion_point(field_get:RigidBody.meanError)
  return meanerror_;
}
inline void RigidBody::set_meanerror(float value) {
  set_has_meanerror();
  meanerror_ = value;
  // @@protoc_insertion_point(field_set:RigidBody.meanError)
}

// required .Position position = 4;
inline bool RigidBody::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RigidBody::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RigidBody::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RigidBody::clear_position() {
  if (position_ != NULL) position_->::Position::Clear();
  clear_has_position();
}
inline const ::Position& RigidBody::position() const {
  // @@protoc_insertion_point(field_get:RigidBody.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Position* RigidBody::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::Position;
  // @@protoc_insertion_point(field_mutable:RigidBody.position)
  return position_;
}
inline ::Position* RigidBody::release_position() {
  clear_has_position();
  ::Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline void RigidBody::set_allocated_position(::Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:RigidBody.position)
}

// required .Quaternion quaternion = 5;
inline bool RigidBody::has_quaternion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RigidBody::set_has_quaternion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RigidBody::clear_has_quaternion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RigidBody::clear_quaternion() {
  if (quaternion_ != NULL) quaternion_->::Quaternion::Clear();
  clear_has_quaternion();
}
inline const ::Quaternion& RigidBody::quaternion() const {
  // @@protoc_insertion_point(field_get:RigidBody.quaternion)
  return quaternion_ != NULL ? *quaternion_ : *default_instance_->quaternion_;
}
inline ::Quaternion* RigidBody::mutable_quaternion() {
  set_has_quaternion();
  if (quaternion_ == NULL) quaternion_ = new ::Quaternion;
  // @@protoc_insertion_point(field_mutable:RigidBody.quaternion)
  return quaternion_;
}
inline ::Quaternion* RigidBody::release_quaternion() {
  clear_has_quaternion();
  ::Quaternion* temp = quaternion_;
  quaternion_ = NULL;
  return temp;
}
inline void RigidBody::set_allocated_quaternion(::Quaternion* quaternion) {
  delete quaternion_;
  quaternion_ = quaternion;
  if (quaternion) {
    set_has_quaternion();
  } else {
    clear_has_quaternion();
  }
  // @@protoc_insertion_point(field_set_allocated:RigidBody.quaternion)
}

// repeated .LabeledMarker markers = 6;
inline int RigidBody::markers_size() const {
  return markers_.size();
}
inline void RigidBody::clear_markers() {
  markers_.Clear();
}
inline const ::LabeledMarker& RigidBody::markers(int index) const {
  // @@protoc_insertion_point(field_get:RigidBody.markers)
  return markers_.Get(index);
}
inline ::LabeledMarker* RigidBody::mutable_markers(int index) {
  // @@protoc_insertion_point(field_mutable:RigidBody.markers)
  return markers_.Mutable(index);
}
inline ::LabeledMarker* RigidBody::add_markers() {
  // @@protoc_insertion_point(field_add:RigidBody.markers)
  return markers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LabeledMarker >&
RigidBody::markers() const {
  // @@protoc_insertion_point(field_list:RigidBody.markers)
  return markers_;
}
inline ::google::protobuf::RepeatedPtrField< ::LabeledMarker >*
RigidBody::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:RigidBody.markers)
  return &markers_;
}

// -------------------------------------------------------------------

// Motive

// required bool duringRecording = 1;
inline bool Motive::has_duringrecording() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Motive::set_has_duringrecording() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Motive::clear_has_duringrecording() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Motive::clear_duringrecording() {
  duringrecording_ = false;
  clear_has_duringrecording();
}
inline bool Motive::duringrecording() const {
  // @@protoc_insertion_point(field_get:Motive.duringRecording)
  return duringrecording_;
}
inline void Motive::set_duringrecording(bool value) {
  set_has_duringrecording();
  duringrecording_ = value;
  // @@protoc_insertion_point(field_set:Motive.duringRecording)
}

// required bool trackedModelsChanged = 2;
inline bool Motive::has_trackedmodelschanged() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Motive::set_has_trackedmodelschanged() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Motive::clear_has_trackedmodelschanged() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Motive::clear_trackedmodelschanged() {
  trackedmodelschanged_ = false;
  clear_has_trackedmodelschanged();
}
inline bool Motive::trackedmodelschanged() const {
  // @@protoc_insertion_point(field_get:Motive.trackedModelsChanged)
  return trackedmodelschanged_;
}
inline void Motive::set_trackedmodelschanged(bool value) {
  set_has_trackedmodelschanged();
  trackedmodelschanged_ = value;
  // @@protoc_insertion_point(field_set:Motive.trackedModelsChanged)
}

// optional string timecode = 3;
inline bool Motive::has_timecode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Motive::set_has_timecode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Motive::clear_has_timecode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Motive::clear_timecode() {
  if (timecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timecode_->clear();
  }
  clear_has_timecode();
}
inline const ::std::string& Motive::timecode() const {
  // @@protoc_insertion_point(field_get:Motive.timecode)
  return *timecode_;
}
inline void Motive::set_timecode(const ::std::string& value) {
  set_has_timecode();
  if (timecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timecode_ = new ::std::string;
  }
  timecode_->assign(value);
  // @@protoc_insertion_point(field_set:Motive.timecode)
}
inline void Motive::set_timecode(const char* value) {
  set_has_timecode();
  if (timecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timecode_ = new ::std::string;
  }
  timecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:Motive.timecode)
}
inline void Motive::set_timecode(const char* value, size_t size) {
  set_has_timecode();
  if (timecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timecode_ = new ::std::string;
  }
  timecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Motive.timecode)
}
inline ::std::string* Motive::mutable_timecode() {
  set_has_timecode();
  if (timecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Motive.timecode)
  return timecode_;
}
inline ::std::string* Motive::release_timecode() {
  clear_has_timecode();
  if (timecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timecode_;
    timecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Motive::set_allocated_timecode(::std::string* timecode) {
  if (timecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timecode_;
  }
  if (timecode) {
    set_has_timecode();
    timecode_ = timecode;
  } else {
    clear_has_timecode();
    timecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Motive.timecode)
}

// repeated .DataDescription descriptions = 4;
inline int Motive::descriptions_size() const {
  return descriptions_.size();
}
inline void Motive::clear_descriptions() {
  descriptions_.Clear();
}
inline const ::DataDescription& Motive::descriptions(int index) const {
  // @@protoc_insertion_point(field_get:Motive.descriptions)
  return descriptions_.Get(index);
}
inline ::DataDescription* Motive::mutable_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:Motive.descriptions)
  return descriptions_.Mutable(index);
}
inline ::DataDescription* Motive::add_descriptions() {
  // @@protoc_insertion_point(field_add:Motive.descriptions)
  return descriptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DataDescription >&
Motive::descriptions() const {
  // @@protoc_insertion_point(field_list:Motive.descriptions)
  return descriptions_;
}
inline ::google::protobuf::RepeatedPtrField< ::DataDescription >*
Motive::mutable_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:Motive.descriptions)
  return &descriptions_;
}

// repeated .RigidBody rigid_bodies = 5;
inline int Motive::rigid_bodies_size() const {
  return rigid_bodies_.size();
}
inline void Motive::clear_rigid_bodies() {
  rigid_bodies_.Clear();
}
inline const ::RigidBody& Motive::rigid_bodies(int index) const {
  // @@protoc_insertion_point(field_get:Motive.rigid_bodies)
  return rigid_bodies_.Get(index);
}
inline ::RigidBody* Motive::mutable_rigid_bodies(int index) {
  // @@protoc_insertion_point(field_mutable:Motive.rigid_bodies)
  return rigid_bodies_.Mutable(index);
}
inline ::RigidBody* Motive::add_rigid_bodies() {
  // @@protoc_insertion_point(field_add:Motive.rigid_bodies)
  return rigid_bodies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RigidBody >&
Motive::rigid_bodies() const {
  // @@protoc_insertion_point(field_list:Motive.rigid_bodies)
  return rigid_bodies_;
}
inline ::google::protobuf::RepeatedPtrField< ::RigidBody >*
Motive::mutable_rigid_bodies() {
  // @@protoc_insertion_point(field_mutable_list:Motive.rigid_bodies)
  return &rigid_bodies_;
}

// -------------------------------------------------------------------

// Update

// required string id = 1;
inline bool Update::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Update::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Update::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Update::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Update::id() const {
  // @@protoc_insertion_point(field_get:Update.id)
  return *id_;
}
inline void Update::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:Update.id)
}
inline void Update::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Update.id)
}
inline void Update::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Update.id)
}
inline ::std::string* Update::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Update.id)
  return id_;
}
inline ::std::string* Update::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Update::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Update.id)
}

// required int32 mod_version = 2;
inline bool Update::has_mod_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Update::set_has_mod_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Update::clear_has_mod_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Update::clear_mod_version() {
  mod_version_ = 0;
  clear_has_mod_version();
}
inline ::google::protobuf::int32 Update::mod_version() const {
  // @@protoc_insertion_point(field_get:Update.mod_version)
  return mod_version_;
}
inline void Update::set_mod_version(::google::protobuf::int32 value) {
  set_has_mod_version();
  mod_version_ = value;
  // @@protoc_insertion_point(field_set:Update.mod_version)
}

// required int32 time = 3;
inline bool Update::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Update::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Update::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Update::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 Update::time() const {
  // @@protoc_insertion_point(field_get:Update.time)
  return time_;
}
inline void Update::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Update.time)
}

// optional .Motive motive = 4;
inline bool Update::has_motive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Update::set_has_motive() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Update::clear_has_motive() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Update::clear_motive() {
  if (motive_ != NULL) motive_->::Motive::Clear();
  clear_has_motive();
}
inline const ::Motive& Update::motive() const {
  // @@protoc_insertion_point(field_get:Update.motive)
  return motive_ != NULL ? *motive_ : *default_instance_->motive_;
}
inline ::Motive* Update::mutable_motive() {
  set_has_motive();
  if (motive_ == NULL) motive_ = new ::Motive;
  // @@protoc_insertion_point(field_mutable:Update.motive)
  return motive_;
}
inline ::Motive* Update::release_motive() {
  clear_has_motive();
  ::Motive* temp = motive_;
  motive_ = NULL;
  return temp;
}
inline void Update::set_allocated_motive(::Motive* motive) {
  delete motive_;
  motive_ = motive;
  if (motive) {
    set_has_motive();
  } else {
    clear_has_motive();
  }
  // @@protoc_insertion_point(field_set_allocated:Update.motive)
}

// repeated .Mouse mice = 5;
inline int Update::mice_size() const {
  return mice_.size();
}
inline void Update::clear_mice() {
  mice_.Clear();
}
inline const ::Mouse& Update::mice(int index) const {
  // @@protoc_insertion_point(field_get:Update.mice)
  return mice_.Get(index);
}
inline ::Mouse* Update::mutable_mice(int index) {
  // @@protoc_insertion_point(field_mutable:Update.mice)
  return mice_.Mutable(index);
}
inline ::Mouse* Update::add_mice() {
  // @@protoc_insertion_point(field_add:Update.mice)
  return mice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mouse >&
Update::mice() const {
  // @@protoc_insertion_point(field_list:Update.mice)
  return mice_;
}
inline ::google::protobuf::RepeatedPtrField< ::Mouse >*
Update::mutable_mice() {
  // @@protoc_insertion_point(field_mutable_list:Update.mice)
  return &mice_;
}

// repeated .Position strokes = 6;
inline int Update::strokes_size() const {
  return strokes_.size();
}
inline void Update::clear_strokes() {
  strokes_.Clear();
}
inline const ::Position& Update::strokes(int index) const {
  // @@protoc_insertion_point(field_get:Update.strokes)
  return strokes_.Get(index);
}
inline ::Position* Update::mutable_strokes(int index) {
  // @@protoc_insertion_point(field_mutable:Update.strokes)
  return strokes_.Mutable(index);
}
inline ::Position* Update::add_strokes() {
  // @@protoc_insertion_point(field_add:Update.strokes)
  return strokes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Position >&
Update::strokes() const {
  // @@protoc_insertion_point(field_list:Update.strokes)
  return strokes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Position >*
Update::mutable_strokes() {
  // @@protoc_insertion_point(field_mutable_list:Update.strokes)
  return &strokes_;
}

// -------------------------------------------------------------------

// Updates

// required int32 mod_version = 1;
inline bool Updates::has_mod_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Updates::set_has_mod_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Updates::clear_has_mod_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Updates::clear_mod_version() {
  mod_version_ = 0;
  clear_has_mod_version();
}
inline ::google::protobuf::int32 Updates::mod_version() const {
  // @@protoc_insertion_point(field_get:Updates.mod_version)
  return mod_version_;
}
inline void Updates::set_mod_version(::google::protobuf::int32 value) {
  set_has_mod_version();
  mod_version_ = value;
  // @@protoc_insertion_point(field_set:Updates.mod_version)
}

// repeated .Update updates = 2;
inline int Updates::updates_size() const {
  return updates_.size();
}
inline void Updates::clear_updates() {
  updates_.Clear();
}
inline const ::Update& Updates::updates(int index) const {
  // @@protoc_insertion_point(field_get:Updates.updates)
  return updates_.Get(index);
}
inline ::Update* Updates::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:Updates.updates)
  return updates_.Mutable(index);
}
inline ::Update* Updates::add_updates() {
  // @@protoc_insertion_point(field_add:Updates.updates)
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Update >&
Updates::updates() const {
  // @@protoc_insertion_point(field_list:Updates.updates)
  return updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::Update >*
Updates::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:Updates.updates)
  return &updates_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_update_5fprotocol_2eproto__INCLUDED
